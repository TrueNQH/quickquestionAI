from PyQt5.QtWidgets import QApplication,QScrollArea,QLineEdit, QRubberBand, QWidget, QVBoxLayout, QLabel, QPushButton, QDialog, QComboBox, QFormLayout, QMessageBox
from PyQt5.QtGui import QMouseEvent
from PyQt5.QtCore import Qt, QPoint, QRect
import sys
import keyboard
import requests

# Kh·ªüi t·∫°o danh s√°ch ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ API
api_results = []  # L∆∞u k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API
api_key=None
api_url = None  # L∆∞u tr·ªØ API URL t·ª´ Google Sheet
flag=True
url_server = "https://dc00-2402-800-6205-a6e9-6828-4090-95e2-1d20.ngrok-free.app"
# Ph√≠m t·∫Øt m·∫∑c ƒë·ªãnh
shortcuts = {
    "capture": "Ctrl + Shift + C",
    "send_api": "Ctrl + Shift + A",
    "show_results": "Ctrl + Shift + R",
    "open_settings": "Ctrl + Shift + O",
    "stop_program": "Ctrl + Shift + Q"
}

class Capture(QWidget):
    def __init__(self):
        super().__init__()
        self.setMouseTracking(True)
        screen = QApplication.primaryScreen()
        rect = screen.geometry()
        self.setGeometry(rect)
        self.setWindowFlags(self.windowFlags() | Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setWindowOpacity(0.15)

        self.rubber_band = QRubberBand(QRubberBand.Rectangle, self)
        self.origin = QPoint()

        QApplication.setOverrideCursor(Qt.CrossCursor)

        self.imgmap = screen.grabWindow(0, rect.x(), rect.y(), rect.width(), rect.height())

    def mousePressEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.origin = event.pos()
            self.rubber_band.setGeometry(QRect(self.origin, event.pos()).normalized())
            self.rubber_band.show()

    def mouseMoveEvent(self, event: QMouseEvent):
        if not self.origin.isNull():
            self.rubber_band.setGeometry(QRect(self.origin, event.pos()).normalized())

    def mouseReleaseEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.rubber_band.hide()
            rect = self.rubber_band.geometry()
            self.imgmap = self.imgmap.copy(rect)
            QApplication.restoreOverrideCursor()

            self.imgmap.save("capture.png")
            self.close()

            # G·ª≠i h√¨nh ·∫£nh ƒë·∫øn API
            send_image_to_api("capture.png")

class ResultDialog(QDialog):
    def __init__(self, results):
        super().__init__()
        self.setWindowTitle("K·∫øt Qu·∫£ API")
        self.setGeometry(200, 200, 500, 300)
        main_layout = QVBoxLayout()
        content_widget = QWidget()
        content_layout = QVBoxLayout()
        for idx, result in enumerate(results, 1):
            question_label = QLabel(f"C√¢u h·ªèi {idx}: {result['answer']}")
            question_label.setWordWrap(True)
            content_layout.addWidget(question_label)
        content_widget.setLayout(content_layout)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(content_widget)
        main_layout.addWidget(scroll_area)
        self.close_button = QPushButton("ƒê√≥ng")
        self.close_button.clicked.connect(self.close)
        main_layout.addWidget(self.close_button)
        self.setLayout(main_layout)


class ShortcutSettingsDialog(QDialog):
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("C√†i ƒë·∫∑t ph√≠m t·∫Øt")
        self.resize(400, 400)

        self.layout = QFormLayout()
        self.api_key_input = QLineEdit()
        self.api_key_input.setPlaceholderText("Nh·∫≠p API Key")
        self.api_key_input.setText(api_key)
        
        self.layout.addRow("API Key:", self.api_key_input)

        self.capture_combo = QComboBox()
        self.capture_combo.addItems(["Ctrl + Shift + C", "Ctrl + Alt + C", "C"])
        self.capture_combo.setCurrentText(shortcuts["capture"])

        self.show_results_combo = QComboBox()
        self.show_results_combo.addItems(["Ctrl + Shift + R", "Ctrl + Alt + R", "R"])
        self.show_results_combo.setCurrentText(shortcuts["show_results"])

        self.open_settings_combo = QComboBox()
        self.open_settings_combo.addItems(["Ctrl + Shift + O", "Ctrl + Alt + O", "O"])
        self.open_settings_combo.setCurrentText(shortcuts["open_settings"])

        self.stop_program_combo = QComboBox()
        self.stop_program_combo.addItems(["Ctrl + Shift + Q", "Ctrl + Alt + Q", "Q"])
        self.stop_program_combo.setCurrentText(shortcuts["stop_program"])

        self.layout.addRow("Ph√≠m ch·ª•p m√†n h√¨nh:", self.capture_combo)
        self.layout.addRow("Ph√≠m hi·ªÉn th·ªã k·∫øt qu·∫£:", self.show_results_combo)
        self.layout.addRow("Ph√≠m m·ªü c√†i ƒë·∫∑t:", self.open_settings_combo)
        self.layout.addRow("Ph√≠m d·ª´ng ch∆∞∆°ng tr√¨nh:", self.stop_program_combo)

        self.save_button = QPushButton("L∆∞u")
        self.save_button.clicked.connect(self.save_settings)
        self.layout.addWidget(self.save_button)

        self.exit_button = QPushButton("Tho√°t ·ª©ng d·ª•ng")
        self.exit_button.clicked.connect(self.exit_application)
        self.layout.addWidget(self.exit_button)

        self.setLayout(self.layout)

    def save_settings(self):
        """Ki·ªÉm tra API key tr∆∞·ªõc khi l∆∞u c√†i ƒë·∫∑t"""
        global api_key, url_server

        api_key = self.api_key_input.text().strip()
        if not api_key:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc khi l∆∞u.")
            return

        url = url_server + "/api/checkapikey"
        data = {"apiKey": api_key}

        try:
            response = requests.post(url, json=data)
            response_data = response.json()

            if response.status_code != 200 or not response_data.get("success"):
                QMessageBox.warning(self, "L·ªói", "API Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.")
                return  # Kh√¥ng l∆∞u c√†i ƒë·∫∑t n·∫øu API key kh√¥ng h·ª£p l·ªá

        except requests.exceptions.RequestException as e:
            QMessageBox.critical(self, "L·ªói k·∫øt n·ªëi", f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.\nL·ªói: {str(e)}")
            return  # Kh√¥ng l∆∞u c√†i ƒë·∫∑t n·∫øu c√≥ l·ªói k·∫øt n·ªëi

        # N·∫øu API key h·ª£p l·ªá, l∆∞u c√†i ƒë·∫∑t
        shortcuts["capture"] = self.capture_combo.currentText()
        shortcuts["show_results"] = self.show_results_combo.currentText()
        shortcuts["open_settings"] = self.open_settings_combo.currentText()
        shortcuts["stop_program"] = self.stop_program_combo.currentText()
        # ƒêƒÉng k√Ω l·∫°i ph√≠m t·∫Øt sau khi l∆∞u
        try:
            keyboard.unhook_all()  # H·ªßy t·∫•t c·∫£ ph√≠m t·∫Øt c≈©
            register_shortcuts()  # ƒêƒÉng k√Ω l·∫°i c√°c ph√≠m t·∫Øt m·ªõi
            print("Ph√≠m t·∫Øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", shortcuts)
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ ƒëƒÉng k√Ω ph√≠m t·∫Øt: {str(e)}")
            return
        QMessageBox.information(self, "Th√†nh c√¥ng", "C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u v√† API Key h·ª£p l·ªá!")
        self.close()

    def exit_application(self):
        print("Tho√°t ·ª©ng d·ª•ng.")
        sys.exit()

def send_image_to_api(image_path):
    global api_url, flag  # C·∫ßn khai b√°o global ƒë·ªÉ thay ƒë·ªïi gi√° tr·ªã
    if not flag:
        print("‚è≥ ƒêang x·ª≠ l√Ω ·∫£nh tr∆∞·ªõc ƒë√≥, vui l√≤ng ch·ªù...")
        return

    flag = False  # NgƒÉn ng∆∞·ªùi d√πng thao t√°c ti·∫øp khi ƒëang g·ª≠i API

    if not api_url:
        print("API URL ch∆∞a c√≥, ƒëang l·∫•y l·∫°i t·ª´ server...")
        api_url = get_api_url_from_server()
        if not api_url:
            print("Kh√¥ng th·ªÉ l·∫•y API URL. H·ªßy g·ª≠i ·∫£nh.")
            flag = True  # Cho ph√©p ch·ª•p l·∫°i n·∫øu l·ªói
            return

    try:
        print("üöÄ ƒêang g·ª≠i ·∫£nh ƒë·∫øn API...")
        data = {'api_key': api_key}
        with open(image_path, 'rb') as image_file:
            files = {'image': image_file}
            response = requests.post(api_url, data=data, files=files)
            response.raise_for_status()
            result = response.json()
            api_results.append(result)
            print(f"‚úÖ ·∫¢nh ƒë√£ g·ª≠i th√†nh c√¥ng: {result}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói khi g·ª≠i ·∫£nh: {e}")
        QMessageBox.warning(None, "L·ªói", "C√≥ l·ªói x·∫£y ra khi g·ª≠i ·∫£nh ƒë·∫øn API!")
    finally:
        flag = True  # Lu√¥n ƒë·∫∑t l·∫°i `flag=True` ƒë·ªÉ ti·∫øp t·ª•c thao t√°c sau khi g·ª≠i xong



# H√†m l·∫•y API URL t·ª´ Google Sheet
def get_api_url_from_server():
    global api_url
    if api_url is not None:
        return api_url  # N·∫øu ƒë√£ c√≥, kh√¥ng g·ªçi l·∫°i API
    
    try:
        google_sheet_api = url_server + "/api/server/available?model_type=gpt-4o-mini"
        response = requests.get(google_sheet_api)
        response.raise_for_status()
        data = response.json()
        api_url = data["data"]["server_url"] + "/upload"
        print(f"API URL nh·∫≠n ƒë∆∞·ª£c t·ª´ Server: {api_url}")
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi l·∫•y URL t·ª´ Server: {e}")
        api_url = None
    
    return api_url

def show_capture_interface():
    global flag
    if flag:
        print("üì∏ B·∫Øt ƒë·∫ßu ch·ª•p m√†n h√¨nh...")
        app = QApplication.instance() or QApplication(sys.argv)
        capture = Capture()
        capture.show()
        app.exec_()
    else:
        QMessageBox.warning(None, "Ch·ªù ch√∫t!!", "üöÄ ƒêang x·ª≠ l√Ω ·∫£nh tr∆∞·ªõc ƒë√≥, vui l√≤ng ch·ªù r·ªìi th·ª≠ l·∫°i.")

def show_results():
    # Kh·ªüi t·∫°o QApplication n·∫øu ch∆∞a c√≥
    app = QApplication.instance()
    if app is None:
        app = QApplication(sys.argv)

    if not api_results:
        print("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã.")
        QMessageBox.warning(None, "Kh√¥ng c√≥ k·∫øt qu·∫£", "Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë·ªÉ hi·ªÉn th·ªã.")
        return

    dialog = ResultDialog(api_results)
    dialog.exec_()

def open_shortcut_settings():
    app = QApplication.instance() or QApplication(sys.argv)
    dialog = ShortcutSettingsDialog()
    dialog.exec_()

def stop_program():
    print("Ch∆∞∆°ng tr√¨nh ƒë√£ d·ª´ng.")
    sys.exit()

def convert_shortcut_to_keyboard_format(shortcut):
    shortcut = shortcut.lower()
    shortcut = shortcut.replace("ctrl", "control")
    shortcut = shortcut.replace(" + ", "+")
    return shortcut

def register_shortcuts():
    try:
        keyboard.unhook_all()
        keyboard.add_hotkey(convert_shortcut_to_keyboard_format(shortcuts["capture"]), show_capture_interface)
        keyboard.add_hotkey(convert_shortcut_to_keyboard_format(shortcuts["show_results"]), show_results)
        keyboard.add_hotkey(convert_shortcut_to_keyboard_format(shortcuts["open_settings"]), open_shortcut_settings)
        keyboard.add_hotkey(convert_shortcut_to_keyboard_format(shortcuts["stop_program"]), stop_program)
        print("Ph√≠m t·∫Øt ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω:", shortcuts)
    except Exception as e:
        print(f"L·ªói khi ƒëƒÉng k√Ω ph√≠m t·∫Øt: {e}")

if __name__ == "__main__":
    print("Ch∆∞∆°ng tr√¨nh ƒëang ch·∫°y n·ªÅn.")
    api_url = get_api_url_from_server()
    open_shortcut_settings()
    keyboard.wait()
